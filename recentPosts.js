handleRecentPosts([
    {
        "filename": "202508161435website overhaul again.md",
        "title": "Updating How These Posts are Stored, Maybe This Works",
        "subtitle": "",
        "thumbnail": "https://i.imgur.com/VQj37QV.png",
        "content": "# Updating How These Posts are Stored, Maybe This Works\n\nSo I'm writing this update to see if this site is properly importing data from github. If so, only 16KB of this page was sent through neocities, and I can avoid potential strain on their servers. Will I ever get enough traffic to strain their servers otherwise? Almost definitely not, but eh.\n\nOk **SO-** goddamn that was a pain. I'm trying (and now succeeding) to load post data from github, and core site data on neocities. I was already building these posts to *javascript* files, and then decided to convert to json to try and do things \"properly.\" This resulted in MIME type and CORS shenanigans, for a while. Apparently, neocities' CSP didn't want me to offload work from them, and wouldn't let me import json. Ended up settling on JSONP... which is... javascript. I was building to javascript instead of json originally. I'm just making very slightly differently flavored javascript, wrapping the data in a function instead of a variable, and this works. Sure, why not. It's javascript, idk why I expected it to stop being haunted.\n\nLo, another piece of tape has been placed on the interconnected web of tape; but nobody wept, for they already knew.\n\n![](https://i.imgur.com/VQj37QV.png)\n"
    },
    {
        "filename": "202508151715procedural mesh generation time ball edition.md",
        "title": "Procedural Mesh Generation Time Again, Ball Edition ",
        "subtitle": "Demo scene:",
        "thumbnail": "https://i.imgur.com/BancAif.png",
        "content": "# Procedural Mesh Generation Time Again, Ball Edition \n\n![Screenshot of a generated planet that happens to be a flower](https://i.imgur.com/BancAif.png)  \n![test](https://i.imgur.com/VQj37QV.png)\n\nWrote a script to solve my ball displacement needs. This started as a remake of an old unity prototype from 2018, sometime mid-june. Basically it's golf with orbital physics, and a very janky camera. For the second shot at it, I may have gotten a bit distracted with mesh generation again. I wanted a system I could use to quickly mockup a planet, so, I spent the better part of a week writing a system to help me quickly solve that problem. Basically, I wanted to generate planets with heightmaps through textures, and a few parameters, with accurate collision. \n\nBasically I'm taking parameters for latitude and longitude segments, minimum and maximum distance from the center, and a texture with heightmap data in the red channel; I'm then projecting a grid of points to a sphere, displaced by the offset in the red channel. Thought about using green and blue for north/south and east/west displacement, but that's not implemented.\n\n\n### Demo scene:\n[demo scene link](https://www.youtube.com/watch?v=PYdqGG5Um7o)\n\nIt's able to use the same generated mesh for collision, which is just lovely. Godot 4 is beautiful. I figured I'd have to write mesh decomposition again, but no! `ConcavePolygonShape3D` understands what you've been through. `ConcavePolygonShape3D` won't hurt you like other collision shapes have.\n\n---\n\nI *might* make the code available for just the script, but I'd like to put a but more polish on it first, it's not quiiiite where I'd like it to be. Maybe I make the in-game camera work, who knows.\n\n"
    }
]);